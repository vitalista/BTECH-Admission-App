@using System.ComponentModel.DataAnnotations
@using BTECH_APP.Models.Admin.Institute
@inject MudBlazor.ISnackbar Snackbar
@inject NavigationManager Navigation
@using BTECH_APP.Services.Admin.Interfaces
@inject IInstituteService _Service
@using Helpers


<MudDialog Style="width:500px">
    <DialogContent>
        <MudForm Model="@model" @ref="form" @bind-IsValid="@isValidated">

         <div style="display:flex;flex-direction:column;justify-content:center; align-items:center">

                @if (!string.IsNullOrWhiteSpace(model.FilePath))
                {
                    <MudImage Src="@model.FilePath" Alt="Uploaded image" Style="width:150px; height:150px; object-fit:cover; border-radius:50%;" />
                }
                else
                {
                    <MudImage Style="width:150px; height:150px; object-fit:cover; border-radius:50%; border:1px solid black" />
                }

                <MudFileUpload T="IBrowserFile" Accept=".png, .jpg, .jpeg" FilesChanged="OnFileSelected" MaximumFileCount="1">
                    <ActivatorContent>
                        <MudButton Variant="Variant.Outlined"
                                   Color="Color.Success"
                                   StartIcon="@Icons.Material.Filled.FileUpload"
                                   Style="text-transform:none; margin-top:10px">
                            Logo
                        </MudButton>
                    </ActivatorContent>
                </MudFileUpload>
         </div>

            <MudTextField @bind-Value="model.FilePath"
                          InputType="InputType.Text"
                          Variant="Variant.Outlined"
                          Required="true"
                          For="@(() => model.FilePath)"
                          Style="display:none"/>

            <MudTextField @bind-Value="model.Name"
                          InputType="InputType.Text"
                          Label="Institute Name"
                          Variant="Variant.Outlined"
                          Required="true"
                          For="@(() => model.Name)" />

            <MudTextField @bind-Value="model.Acronym"
                          InputType="InputType.Text"
                          Label="Institute Acronym"
                          Variant="Variant.Outlined"
                          Required="true"
                          For="@(() => model.Acronym)" />

            <MudSelect @bind-Value="@model.IsActive" Label="Status" FitContent="true" Variant="Variant.Outlined" ShrinkLabel>
                <MudSelectItem Value=true>Active</MudSelectItem>
                <MudSelectItem Value=false>Inactive</MudSelectItem>
            </MudSelect>

            <MudButton Type="Submit" Color="Color.Success" Disabled="@(!isValidated)" Variant="Variant.Filled" Class="mt-3" OnClick="OnValidSubmit">
                Save Changes
            </MudButton>
            <MudButton Class="mt-2" OnClick="() => CloseModal(false)">Cancel</MudButton>
        </MudForm>
    </DialogContent>
</MudDialog>

@code {
    [CascadingParameter]
    private IMudDialogInstance MudDialog { get; set; } = default!;
    [Parameter]
    public SaveInstituteModel model { get; set; } = new();

    private MudForm form = new();
    private bool isValidated = false;
    private IBrowserFile? BrowserFile;

    private async Task OnValidSubmit()
    {
        await form.Validate();

        if (form.IsValid)
        {
            var (success,errorMessage) = await _Service.Save(model, BrowserFile ?? null);

            if (success)
            {
                Snackbar.Add("Successfully Updated.", Severity.Success);
                await CloseModal(true);
            }
            else
                Snackbar.Add(errorMessage, Severity.Error);
        }
        else
            Snackbar.Add("Failed", Severity.Error);

    }

    private async Task OnFileSelected(IBrowserFile file)
    {
        var onFileSelected = await @Helper.UploadFile(file, "Institute/_temp");

        BrowserFile = file;
        model.FilePath = onFileSelected.FilePath;
    }

    private async Task CloseModal(bool success)
    {
        if (success)
            MudDialog.Close(DialogResult.Ok(true));
        else
        {
            await form.ResetAsync();

            await Task.Delay(100);
            MudDialog.Cancel();
        }
    }
}
