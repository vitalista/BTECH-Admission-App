@page "/institutes"
@using BTECH_APP.Components.Shared
@layout Components.Layout.AdminLayout
@inject IDialogService DialogService
@using BTECH_APP.Models.Admin.Institute
@using BTECH_APP.Services.Admin.Interfaces
@using Helpers
@inject IInstituteService _Service

<div style="width:100%">
<div Style="padding-top:30px;display:flex;justify-content:flex-end;">
    <MudButton OnClick="OpenComponentCreate"
               StartIcon="@Icons.Material.Filled.AddCircleOutline"
               Color="Color.Success"
               Size="Size.Small"
               Variant="Variant.Filled"
               Style="margin-right:5px">
        Create
    </MudButton>
</div>

<ComponentTable TItem="ListInstituteModel"
                Items="Institutes"
                Title="Institutes"
                EnableSearch="true"
                FilterFunc="FilterElement">

    <HeaderTemplate>
        <MudTh Style="width:90px"></MudTh>
        <MudTh><MudTableSortLabel SortBy="new Func<ListInstituteModel, object>(x => x.Name)">Institute Name</MudTableSortLabel></MudTh>
        <MudTh Style="width:40px"><MudTableSortLabel SortBy="new Func<ListInstituteModel, object>(x => x.Acronym)">Acronym</MudTableSortLabel></MudTh>
        <MudTh Style="width:30px"><MudTableSortLabel SortBy="new Func<ListInstituteModel, object>(x => x.Status)">Status</MudTableSortLabel></MudTh>
        <MudTh Style="width:300px"><MudTableSortLabel SortBy="new Func<ListInstituteModel, object>(x => x.ModifiedDate ?? DateTime.UtcNow)">Last Updated</MudTableSortLabel></MudTh>
        <MudTh Style="width:30px">Actions</MudTh>
    </HeaderTemplate>

    <RowTemplate Context="institute">
        <MudTd DataLabel="Logo">
            <MudImage Src="@institute.FilePath"
                      Alt="Uploaded image"
                      Style="width:80px; height:80px; object-fit:cover; border-radius:50%;"
                      Class="shadow" />

        </MudTd>
        <MudTd DataLabel="Institute Info">
            <strong>@institute.Name</strong>
        </MudTd>

        <MudTd DataLabel="Acronym">
            <strong>@institute.Acronym</strong>
        </MudTd>

        <MudTd DataLabel="Status">
            @institute.Status
        </MudTd>

        <MudTd DataLabel="Last Updated">
            <div><strong>@institute.ModifiedByName</strong></div>
            <div><small>On: @Helper.FormatDate(institute.ModifiedDate)</small></div>
        </MudTd>

        <MudTd DataLabel="Action">
            <MudMenu Icon="@Icons.Material.Filled.MoreVert"
                      Dense
                      AnchorOrigin="Origin.TopRight"
                      TransformOrigin="Origin.TopRight">
                 <MudMenuItem Icon="@Icons.Material.Filled.Edit" Label="Edit" OnClick="()=>OpenComponentEdit(institute.InstituteId)" />
                 <MudMenuItem Icon="@Icons.Material.Filled.Delete" Label="Delete" OnClick="()=>OpenComponentDelete(institute.InstituteId)" />
             </MudMenu>
         </MudTd>
     </RowTemplate>

 </ComponentTable>
 </div>

 @code {

    private List<ListInstituteModel> Institutes = new();

    protected override async Task OnInitializedAsync()
    {
        await LoadData();
    }

    private async Task LoadData()
    {
        Institutes = await _Service.List();
        StateHasChanged();
    }

    private bool FilterElement(ListInstituteModel institute, string search)
    {
        return institute.Name.Contains(search, StringComparison.OrdinalIgnoreCase)
            || institute.Acronym.Contains(search, StringComparison.OrdinalIgnoreCase)
            || institute.Status.Contains(search, StringComparison.OrdinalIgnoreCase)
            || institute.ModifiedByName.Contains(search, StringComparison.OrdinalIgnoreCase);
    }

    private async Task OpenComponentCreate()
    {
        var options = new DialogOptions { CloseOnEscapeKey = true, CloseButton = true };

        var dialog = await DialogService.ShowAsync<ComponentCreate>("Create Institute", options);
        var result = await dialog.Result;

        if(result != null)
            if (!result.Canceled)
            {
                await LoadData();
            }
    }

    private async Task OpenComponentEdit(int instituteId)
    {
        var institute = await _Service.Find(instituteId);

        if (institute != null) {

            var options = new DialogOptions { CloseOnEscapeKey = true, CloseButton = true };

            var prop = new DialogParameters
            {
                {nameof(ComponentEdit.model), institute}
            };

            var dialog = await DialogService.ShowAsync<ComponentEdit>("Update Institute", prop, options);
            var result = await dialog.Result;

            if (result != null)
                if (!result.Canceled)
                {
                    await LoadData();
                }
        }
    }

    private async Task OpenComponentDelete(int instituteId)
    {
        var institute = await _Service.Find(instituteId);

        if (institute != null) {

            var options = new DialogOptions { CloseOnEscapeKey = true, CloseButton = true };

            var prop = new DialogParameters
            {
                {nameof(ComponentDelete.model), institute}
            };

            var dialog = await DialogService.ShowAsync<ComponentDelete>("Delete Institute",prop, options);
            var result = await dialog.Result;

            if (result != null)
                if (!result.Canceled)
                {
                    await LoadData();
                }
        }
    }

}
