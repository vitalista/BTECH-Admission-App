@using BTECH_APP.Models
@using BTECH_APP.Models.Admin.UserManagement
@using BTECH_APP.Services.Admin.Interfaces
@inject IUserManagementService _Service
@inject UserContext _userContext
@inject MudBlazor.ISnackbar Snackbar

<MudDialog Style="width:500px">
     <DialogContent>
    <MudForm Model="@passwordModel" @ref="changePasswordForm" @bind-IsValid="@isChangePasswordValidated">
                <MudTextField @bind-Value="passwordModel.OldPassword"
                              Label="Current Password"
                              Variant="Variant.Outlined"
                              Required="true"
                              For="@(() => passwordModel.OldPassword)"
                              InputType="@(_showOldPassword ? InputType.Text : InputType.Password)"
                              Adornment="Adornment.End"
                              AdornmentIcon="@(_showOldPassword ? Icons.Material.Filled.Visibility : Icons.Material.Filled.VisibilityOff)"
                              OnAdornmentClick="@ToggleOldPasswordVisibility" />

                <MudTextField @bind-Value="passwordModel.Password"
                              Label="Password"
                              Variant="Variant.Outlined"
                              Required="true"
                              Disabled="string.IsNullOrEmpty(passwordModel.OldPassword)"
                              For="@(() => passwordModel.Password)"
                              InputType="@(_showPassword ? InputType.Text : InputType.Password)"
                              Adornment="Adornment.End"
                              AdornmentIcon="@(_showPassword ? Icons.Material.Filled.Visibility : Icons.Material.Filled.VisibilityOff)"
                              OnAdornmentClick="@TogglePasswordVisibility" />

                <MudTextField @bind-Value="passwordModel.ConfirmPassword"
                              Label="Confirm Password"
                              Variant="Variant.Outlined"
                              Required="true"
                              Disabled="string.IsNullOrEmpty(passwordModel.Password)"
                              For="@(() => passwordModel.ConfirmPassword)"
                              InputType="@(_showConfirmPassword ? InputType.Text : InputType.Password)"
                              Adornment="Adornment.End"
                              AdornmentIcon="@(_showConfirmPassword ? Icons.Material.Filled.Visibility : Icons.Material.Filled.VisibilityOff)"
                              OnAdornmentClick="@ToggleConfirmPasswordVisibility" />

        <MudStack Class="mt-4" Row="true" Justify="Justify.FlexEnd" Spacing="2">
            <MudButton Color="Color.Success"
                       Variant="Variant.Filled"
                       Disabled="string.IsNullOrEmpty(passwordModel.ConfirmPassword) || !passwordModel.Password.Equals(passwordModel.ConfirmPassword)"
                       OnClick="OnValidSubmitChangePassword">
                Update Password
            </MudButton>
        </MudStack>
    </MudForm>
     </DialogContent>
</MudDialog>


@code{
    [CascadingParameter]
    private IMudDialogInstance MudDialog { get; set; } = default!;

    private MudForm changePasswordForm = new();
    public SaveChangePasswordUserManagementModel passwordModel = new();

    private bool _showOldPassword = false;
    private bool _showPassword = false;
    private bool _showConfirmPassword = false;
    private bool isChangePasswordValidated = false;

    private void ToggleOldPasswordVisibility() => _showOldPassword = !_showOldPassword;
    private void TogglePasswordVisibility() => _showPassword = !_showPassword;
    private void ToggleConfirmPasswordVisibility() => _showConfirmPassword = !_showConfirmPassword;

    private async Task OnValidSubmitChangePassword()
    {
        await changePasswordForm.Validate();

        if (changePasswordForm.IsValid)
        {
            passwordModel.UserId = _userContext.CurrentUser.UserId;

            var success = await _Service.ChangePassword(passwordModel);

            if (success)
            {
                Snackbar.Add("Password updated successfully.", Severity.Success);
                await CloseModal(true);
            }
            else
                Snackbar.Add("Password is incorrect!", Severity.Error);
        }
        else
        {
            Snackbar.Add("Please correct the highlighted fields.", Severity.Error);
        }
    }

    private async Task CloseModal(bool success)
    {
        if (success)
            MudDialog.Close(DialogResult.Ok(true));
        else
        {
            await Task.Delay(100);
            MudDialog.Cancel();
        }
    }
}